function s = readSpikes( file, frameDur )
%READSPIKES is used to read spikes generated by CARLsim
%Output is matrix S = (time x nID), indices start at 1.
%   FILE:       path to spike file (expects data to be in Adress-Event
%               Representation AER: spike time (ms) followed by neuron ID
%               (both uint32))
%   FRAMEDUR:   binning size (ms). S will contain # spikes a neuron emitted
%               per FRAMEDUR. If -1, S will be returned in AER format
%               [times;nIDs]
%
% Created by: Micah Richert
% Currently maintained by: Michael Beyeler, Kristofor Carlson
% Ver 05/31/12

% NARGIN is number of arguments passed to the function
if nargin<2,frameDur=1000;end
if nargin<1,error('path to spike file needed');end

% Open, initialize, and read file
fid=fopen(file,'r');
if fid==-1
	error('could not open spike file');
end

nrRead=1e6;
d=zeros(0,nrRead);
s=[];

while size(d,2)==nrRead
    % D is a 2xNRREAD matrix.  Row 1 contains the times that the neuron spiked.
    % Row 2 contains the neuron id that spiked at this corresponding time.
    d=fread(fid,[2 nrRead],'uint32');
    
    if ~isempty(d)
        if frameDur<0
            % Return data in AER format, i.e.: [time;nID]
            % Note: Using SPARSE on large matrices that mostly contain 0 is
            % inefficient (-> "big sparse matrix")
            s=[s,d];
        else
            % Resulting matrix s will have rows corresponding to time values
            % with a minimum value of 1 and columns organized by neuron ids that
            % are indexed starting with 1.  FRAMEDUR effectively bins the data.
            % FRAMEDUR=1 bins at 1 ms, FRAMEDUR=1000 bins at 1000 ms, etc.
            
            % Initialize the entire S matrix to 0 with the correct dimensions.
            maxR = floor(d(1,end)/frameDur)+1;
            maxC = max(d(2,:))+1;
            if size(s,1)~=maxR || size(s,2)~=maxC
                s(maxR,maxC)=0;
            end
            
            % Use sparse matrix to create a matrix S with correct dimensions.
            % All firing events for each neuron id and time bin are summed
            % automatically with ACCUMARRAY.  Finally the matrix is resized to
            % include all the zero entries with the correct matrix dimensions.
            % ACCUMARRAY is supposed to be faster than full(sparse(...)). Make
            % sure the first two arguments are column vectors.
            s=s+accumarray([floor(d(1,:)/frameDur)'+1,d(2,:)'+1],1,size(s));
        end
    end
end

fclose(fid);
end